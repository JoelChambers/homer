#!KAMAILIO
#
# Example configuration file for a sipcapture node
#

####### Global Parameters definitions #########
#
# Please, make all your configuration changes here
#
# *** To enable extra stats
#     - define WITH_STATISTIC_METHOD_EXTRA
#     - define WITH_STATISTIC_INVITE_1XX



#!substdef "!HOMER_DB_USER!user!g"
#!substdef "!HOMER_DB_PASSWORD!pass"
#!substdef "!HOMER_LISTEN_PROTO!udp!g"
#!substdef "!HOMER_LISTEN_IF!1.2.3.4!g"
#!substdef "!HOMER_LISTEN_PORT!9060!g"
#!substdef "!HOMER_STATS_SERVER!tcp:HOMER_LISTEN_IF:8888!g"

####### Global Parameters #########

debug=-2
log_stderror=no

##!define WITH_HOMER_GEO
##!define WITH_HOMER_CUSTOM_STATS #enable it for HTTP custom stats

# monitoring
#!define XMLRPC

log_facility=LOG_LOCAL5

fork=yes
children=60

/* uncomment the next line to disable TCP (default on) */
disable_tcp=no
tcp_children=4

/* IP and port for HEP capturing) */
#listen=HOMER_LISTEN_PROTO:HOMER_LISTEN_IF:HOMER_LISTEN_PORT
port=HOMER_LISTEN_PORT

#!ifdef WITH_HOMER_CUSTOM_STATS
listen=HOMER_STATS_SERVER
#!endif

#Max loops
max_while_loops=100

loadpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"

loadmodule "pv.so"
loadmodule "db_mysql.so"
loadmodule "sipcapture.so"
loadmodule "textops.so"
loadmodule "rtimer.so"
loadmodule "xlog.so"
loadmodule "sqlops.so"
loadmodule "htable.so"
loadmodule "tm.so"
loadmodule "sl.so"
loadmodule "siputils.so"
loadmodule "exec.so"
loadmodule "ipops.so"
loadmodule "ss7ops.so"

#!ifdef XMLRPC
loadmodule "xmlrpc.so"
#!endif

#!ifdef WITH_HOMER_GEO
loadmodule "geoip.so"
#!endif

#!ifdef WITH_HOMER_CUSTOM_STATS
loadmodule "xhttp.so"
loadmodule "jansson.so"
loadmodule "avpops.so"
#!endif


modparam("htable", "htable", "a=>size=8;autoexpire=400")
modparam("htable", "htable", "b=>size=8;autoexpire=31")
# TODO: tune autoexpire setting for htable "c"
modparam("htable", "htable", "c=>size=8;autoexpire=31")

#!ifdef WITH_HOMER_CUSTOM_STATS
modparam("htable", "htable", "d=>size=8;autoexpire=400")
modparam("xhttp", "url_match", "^/api/v1/stat")
#!endif

modparam("rtimer", "timer", "name=ta;interval=60;mode=1;")
modparam("rtimer", "exec", "timer=ta;route=TIMER_STATS")

modparam("sqlops","sqlcon","cb=>mysql://HOMER_DB_USER:HOMER_DB_PASSWORD@HOMER_LISTEN_IF/homer_statistic")
modparam("sqlops","sqlcon","is=>mysql://HOMER_DB_USER:HOMER_DB_PASSWORD@HOMER_LISTEN_IF/homer_data")
modparam("sqlops","tr_buf_size", 4096)

#!ifdef XMLRPC
modparam("xmlrpc", "route", "XMLRPC")
modparam("xmlrpc", "url_match", "^/RPC2")
#!endif

modparam("db_mysql", "server_timezone", 1)

# ----- mi_fifo params -----

####### Routing Logic ########
modparam("sipcapture", "db_url", "mysql://HOMER_DB_USER:HOMER_DB_PASSWORD@HOMER_LISTEN_IF/homer_data")
modparam("sipcapture", "capture_on", 1)
modparam("sipcapture", "hep_capture_on", 1)
modparam("sipcapture", "insert_retries", 5)
modparam("sipcapture", "insert_retry_timeout", 10)
#new event sipcapture socket
modparam("sipcapture", "nonsip_hook", 1)
modparam("sipcapture", "capture_node", "capturenode")
modparam("sipcapture", "callid_aleg_header", "X-ORIGSIPCALLID")

#!ifdef WITH_HOMER_GEO
modparam("geoip", "path", "/usr/share/GeoIP/GeoIP.dat")
#!endif

#Stats time
stats.min = 5 desc "My stats TIME min"


# Main SIP request routing logic
# - processing of any incoming SIP request starts with this route
route {

# Do normal stuff

}
route[STORE_ISUP] {
	$var(json) = $(isup(1){sql.val});
	$var(method) = $(isup(method){sql.val});
	$var(opc) = $isup(opc);
	$var(dpc) = $isup(dpc);
	$var(cic) = $isup(cic);
	if ($var(opc) > $var(dpc)) {
		$var(corr_id) = "" + $var(opc) + "-" + $var(dpc) + "-" + $var(cic);
	} else {
		$var(corr_id) = "" + $var(dpc) + "-" + $var(opc) + "-" + $var(cic);
	}

	# Generic IPv4 data... assume that
	$var(src_ip) = $(hep(0x003){sql.val});
	$var(dst_ip) = $(hep(0x004){sql.val});
	$var(src_port) = $(hep(0x007){sql.val});
	$var(dst_port) = $(hep(0x008){sql.val});
	xlog("HEP: src_ip: $var(src_ip) dst_ip: $var(dst_ip) src_port: $var(src_port) dst_port: $var(dst_port)\r\n");
	$var(time_sec) = $(hep(0x009){sql.val});
	$var(time_usec) = $(hep(0x00a){sql.val});
	$var(proto) = $(hep(0x00b){sql.val});

	$var(called_inn) = $(isup(called_inn){sql.val});
	$var(called_ton) = $(isup(called_ton){sql.val});
	$var(called_npi) = $(isup(called_npi){sql.val});
	$var(called_num) = $(isup(called_num){sql.val});
	$var(calling_ni) = $(isup(calling_ni){sql.val});
	$var(calling_res) = $(isup(calling_restrict){sql.val});
	$var(calling_scr) = $(isup(calling_screened){sql.val});
	$var(calling_ton) = $(isup(calling_ton){sql.val});
	$var(calling_npi) = $(isup(calling_npi){sql.val});
	$var(calling_num) = $(isup(calling_num){sql.val});
	$var(calling_cat) = $(isup(calling_category){sql.val});
	$var(cause_std) = $(isup(cause_standard){sql.val});
	$var(cause_loc) = $(isup(cause_location){sql.val});
	$var(cause_cls) = $(isup(cause_itu_class){sql.val});
	$var(cause_num) = $(isup(cause_itu_num){sql.val});
	$var(event_num) = $(isup(event_num){sql.val});
	$var(hop_count) = $(isup(hop_counter){sql.val});
	$var(nci_sat) = $(isup(nature_of_conn_sat){sql.val});
	$var(nci_con) = $(isup(nature_of_conn_con_check){sql.val});
	$var(nci_ech) = $(isup(nature_of_conn_echo_device){sql.val});
	$var(fwd_nic) = $(isup(fwd_call_international){sql.val});
	$var(fwd_interw) = $(isup(fwd_call_interworking){sql.val});
	$var(fwd_eemeth) = $(isup(fwd_call_end_to_end_method){sql.val});
	$var(fwd_eeinf) = $(isup(fwd_call_end_to_end_method){sql.val});
	$var(fwd_isup) = $(isup(fwd_call_isup){sql.val});
	$var(fwd_isupp) = $(isup(fwd_call_isup_preference){sql.val});
	$var(fwd_sccp) = $(isup(fwd_call_sccp_method){sql.val});
	$var(fwd_isdn) = $(isup(fwd_call_isdn){sql.val});
	$var(trans_med) = $(isup(transmission_medium){sql.val});
	$var(ui_coding) = $(isup(user_info_coding_standard){sql.val});
	$var(ui_tracap) = $(isup(user_info_transfer_cap){sql.val});
	$var(ui_tramde) = $(isup(user_info_transfer_mode){sql.val});
	$var(ui_trarte) = $(isup(user_info_transfer_rate){sql.val});
	$var(ui_l1idnt) = $(isup(user_info_layer1_ident){sql.val});
	$var(ui_l1prot) = $(isup(user_info_layer1_protocol){sql.val});
	$var(utc) = $utimef(%Y%m%d);

	$var(table) = "isup_capture_all_" + $var(utc);
	sql_query("is", "INSERT INTO $var(table)
				(correlation_id, method, opc, dpc, cic, called_inn, called_ton,
				 called_npi, called_number, calling_ni, calling_restrict,
				 calling_screened, calling_ton, calling_npi, calling_number,
				 calling_category, cause_standard, cause_location, cause_itu_class,
				 cause_itu_cause, event_num, hop_counter, nci_satellite,
				 nci_continuity_check, nci_echo_device, fwc_nic, fwc_etem,
				 fwc_iw, fwc_etei, fwc_isup, fwc_isup_pref, fwc_ia, fwc_sccpm,
				 transmission_medium, user_coding_standard,
				 user_transfer_cap, user_transfer_mode,
				 user_transfer_rate, user_layer1_ident, user_layer1_proto,
				 source_ip, source_port, destination_ip, destination_port,
				 proto, date, micro_ts, msg)
                                VALUES($(var(corr_id){sql.val}), $var(method), $(var(opc){sql.val}),
					$(var(dpc){sql.val}), $(var(cic){sql.val}), $var(called_inn),
					$var(called_ton), $var(called_npi), $var(called_num),
					$var(calling_ni), $var(calling_res), $var(calling_scr),
					$var(calling_ton), $var(calling_npi), $var(calling_num),
					$var(calling_cat), $var(cause_std), $var(cause_loc),
					$var(cause_cls), $var(cause_num), $var(event_num),
					$var(hop_counter), $var(nci_sat), $var(nci_con),
					$var(nci_ech), $var(fwd_nic), $var(fwd_eemeth),
					$var(fwd_interw), $var(fwd_eeinf), $var(fwd_isup),
					$var(fwd_isupp), $var(fwd_isdn), $var(fwd_sccp),
					$var(trans_med), $var(ui_coding), $var(ui_tracap),
					$var(ui_tramde), $var(ui_trarte), $var(ui_l1idnt),
					$var(ui_l1prot), $var(src_ip), $var(src_port),
					$var(dst_ip), $var(dst_port), $var(proto),
					from_unixtime($var(time_sec)), $var(time_sec) * 1000000 + $var(time_usec),
					$var(json));");
}


event_route[sipcapture:request] {

        xlog("HEP Request!\n");
        xlog("received sipcapture request from $si:$sp\r\n");
        xlog("HEP VERSION $hep(version) request from $si:$sp\r\n");
        xlog("HEP CHUNK Source IP $hep(0x002) request from $si:$sp\r\n");
	#Is it SIP ?
	if($hep(0x00b) == 1){

		#Do parsing internal
		return 1;
	}
	else if ($hep(0x00b) == 8) {
		# We are parsing M2UA now and want ISUP from it
		$var(payload) = $hep(0x00f);
		$var(res) = isup_to_json(8);

		# It is ISUP so let us try to insert it into a database
		if ($var(res) == 1) {
			route(STORE_ISUP);
			drop;
		}

		return 0;
	}
	else if ($hep(0x00b) == 13) {
		$var(payload) = $hep(0x00f);
		$var(res) = isup_to_json(13);

		# It is ISUP so let us try to insert it into a database
		if ($var(res) == 1) {
			route(STORE_ISUP);
			drop;
		}

		return 0;
	}
	# Store Logs
	else if ($hep(0x00b) == 100) {
		$var(correlation_id) = $hep(0x011);
		$var(content) = $hep(0x00f);
		xlog("Received Log from $si:$sp for Call '$var(correlation_id)', content $hep(0x00f)\r\n");
		report_capture("logs_capture", "$var(correlation_id)", "$var(content)");
		return 0;
	}
	else 
	{
#If report lets proceed here with payload
		xlog("HEP CHUNK PAYLOAD $hep(0x00f) request from $si:$sp\r\n");
		return 0;
	}
}

